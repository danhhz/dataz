// Copyright 2022 Daniel Harrison. All Rights Reserved.

//! High-throughput computational dataset synthesis

#![warn(missing_docs, missing_debug_implementations)]

use crate::col::{Col, Data};

pub mod col;
pub mod kvtd;
#[cfg(feature = "serde")]
pub mod serde;
#[cfg(feature = "rand")]
pub mod tpcc;

/// A named dataset made up of one or more [Table]s.
pub trait Set: 'static {
    /// Configuration necessary for construct this dataset.
    type Config;

    /// Construct an instance of this dataset with the given configuration.
    fn init(config: Self::Config) -> Self;

    /// The tables making up this dataset.
    fn tables<F: TableFnMut<()>>(&self, f: &mut F);
}

/// A type-erased [Table].
pub trait DynTable: 'static {
    /// A human-readable name for this table.
    fn name(&self) -> &'static str;

    /// The number of batches of data in this table.
    fn num_batches(&self) -> usize;
}

/// A named set of data with a uniform schema.
///
/// A table is generated in batches, each of which contains one or more rows.
/// For each parallelization, each batch can be generated purely as a function
/// of its index and dataset configuration. For vectorization, a batch is
/// internally arranged in columns.
pub trait Table: DynTable + Clone {
    /// The type data generated by this table.
    type Data: Data;

    /// Generates the requested batch's data.
    ///
    /// If the batch has been cleared, this reuses allocations when possible. If
    /// the requested index is out of bounds, no data is added.
    fn gen_batch<C: Col<Self::Data>>(&mut self, idx: usize, batch: &mut C);
}

/// Basically `FnMut<T: Table>(T) -> R`
pub trait TableFnMut<R> {
    /// Performs the call operation.
    fn call_mut<T: Table>(&mut self, t: T) -> R;
}
